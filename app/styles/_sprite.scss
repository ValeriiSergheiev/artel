/*
SCSS variables are information about icon's compiled state, stored under its original file name

.icon-home {
  width: $icon-home-width;
}

The large array-like variables contain all information about a single icon
$icon-home: x y offset_x offset_y width height total_width total_height image_path;

At the bottom of this section, we provide information about the spritesheet itself
$spritesheet: width height image $spritesheet-sprites;
*/
$geo-name: 'geo';
$geo-x: 60px;
$geo-y: 0px;
$geo-offset-x: -60px;
$geo-offset-y: 0px;
$geo-width: 23px;
$geo-height: 34px;
$geo-total-width: 83px;
$geo-total-height: 60px;
$geo-image: '../images/sprite.png';
$geo: (60px, 0px, -60px, 0px, 23px, 34px, 83px, 60px, '../images/sprite.png', 'geo', );
$lang-lg-name: 'lang_lg';
$lang-lg-x: 0px;
$lang-lg-y: 0px;
$lang-lg-offset-x: 0px;
$lang-lg-offset-y: 0px;
$lang-lg-width: 60px;
$lang-lg-height: 60px;
$lang-lg-total-width: 83px;
$lang-lg-total-height: 60px;
$lang-lg-image: '../images/sprite.png';
$lang-lg: (0px, 0px, 0px, 0px, 60px, 60px, 83px, 60px, '../images/sprite.png', 'lang_lg', );
$lang-sm-name: 'lang_sm';
$lang-sm-x: 60px;
$lang-sm-y: 34px;
$lang-sm-offset-x: -60px;
$lang-sm-offset-y: -34px;
$lang-sm-width: 22px;
$lang-sm-height: 22px;
$lang-sm-total-width: 83px;
$lang-sm-total-height: 60px;
$lang-sm-image: '../images/sprite.png';
$lang-sm: (60px, 34px, -60px, -34px, 22px, 22px, 83px, 60px, '../images/sprite.png', 'lang_sm', );
$spritesheet-width: 83px;
$spritesheet-height: 60px;
$spritesheet-image: '../images/sprite.png';
$spritesheet-sprites: ($geo, $lang-lg, $lang-sm, );
$spritesheet: (83px, 60px, '../images/sprite.png', $spritesheet-sprites, );

/*
The provided mixins are intended to be used with the array-like variables

.icon-home {
  @include sprite-width($icon-home);
}

.icon-email {
  @include sprite($icon-email);
}

Here are example usages in HTML:

`display: block` sprite:
<div class="icon-home"></div>

`display: inline-block` sprite:
<img class="icon-home" />
*/
@mixin sprite-width($sprite) {
  width: nth($sprite, 5);
}

@mixin sprite-height($sprite) {
  height: nth($sprite, 6);
}

@mixin sprite-position($sprite) {
  $sprite-offset-x: nth($sprite, 3);
  $sprite-offset-y: nth($sprite, 4);
  background-position: $sprite-offset-x  $sprite-offset-y;
}

@mixin sprite-image($sprite) {
  $sprite-image: nth($sprite, 9);
  background-image: url(#{$sprite-image});
}

@mixin sprite($sprite) {
  @include sprite-image($sprite);
  @include sprite-position($sprite);
  @include sprite-width($sprite);
  @include sprite-height($sprite);
}

/*
The `sprites` mixin generates identical output to the CSS template
  but can be overridden inside of SCSS

@include sprites($spritesheet-sprites);
*/
@mixin sprites($sprites) {
  @each $sprite in $sprites {
    $sprite-name: nth($sprite, 10);
    .#{$sprite-name} {
      @include sprite($sprite);
    }
  }
}
